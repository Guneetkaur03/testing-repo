name: Create Review Issue on Close

on:
  issues:
    types: [closed]

jobs:
  create_review_issue:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    env:
      GH_TOKEN: ${{ secrets.PROJECT_PAT }}
      # Use inputs.project-url if available (for workflow_call), else fallback to hardcoded value
      PROJECT_URL: ${{ inputs.project-url || 'https://github.com/users/Guneetkaur03/projects/2' }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
          
      # Step 1: Find if the Review Issue already exists and reopen if closed
      - name: Find or reopen review issue
        id: review_issue_check
        env:
          GH_TOKEN: ${{ github.token }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          BODY="${{ github.event.issue.body }}"
          TITLE="${{ github.event.issue.title }}"

          if [[ "$TITLE" == Review\ Issue* ]]; then
            echo "‚è≠ Skipping: This is already a review issue"
            exit 78
          fi

          OPEN_REVIEW=$(echo "$BODY" | grep -i "Open Review Issue:" | grep -oEi "true|false" | head -n1)
          OPEN_REVIEW=${OPEN_REVIEW,,}
          if [[ -z "$OPEN_REVIEW" || "$OPEN_REVIEW" != "true" ]]; then
            echo "‚è≠ Skipping: Open Review Issue not set to true"
            exit 78
          fi

          ASSIGNEE=$(echo "$BODY" | grep -i "Assign To:" | sed -E 's/.*Assign To:\s*//i' | sed 's/@//g' | xargs)

          echo "open_review=$OPEN_REVIEW" >> $GITHUB_OUTPUT
          echo "assignee=$ASSIGNEE" >> $GITHUB_OUTPUT

          # Check if the review issue already exists
          REVIEW_TITLE="Review Issue $ISSUE_NUMBER"
          issue=$(gh issue list \
                  --state "all" \
                  --search "$REVIEW_TITLE in:title" \
                  --json number,title,state,id \
                  --jq '[.[] | select(.title == "'"$REVIEW_TITLE"'")]')

          echo "::debug::Issue JSON: $issue"
          if [[ -n "$issue" ]]; then
            state=$(echo "$issue" | jq -r '.[0].state')
            issue_number=$(echo "$issue" | jq -r '.[0].number')
            issue_id=$(echo "$issue" | jq -r '.[0].id' | tr -d '\r\n')
            echo "Review issue found: #$issue_number ($state)"
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "::info::issue json: $issue"
            echo "::info::issue_id format: $issue_id"
            # Validate format before writing
            if [[ "$issue_id" =~ ^I_[a-zA-Z0-9]+$ ]]; then
              echo "issue_id=$issue_id" >> $GITHUB_OUTPUT
            else
              echo "::error::Invalid issue_id format: '$issue_id'"
              exit 1
            fi

            if [[ "$state" == "CLOSED" ]]; then
              echo "üîÅ Reopening closed issue #$issue_number"
              gh api graphql -f query='
                mutation($id:ID!){
                  reopenIssue(input:{issueId:$id}) {
                    issue { id }
                  }
                }' -f id="$issue_id"
            fi
          else
            echo "Review issue does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # Step 2: Create Review Issue if it doesn't exist
      - name: Create review issue if not found
        if: steps.review_issue_check.outputs.exists == 'false'
        id: new_issue
        uses: actions/github-script@v6
        with:
          script: |
            const original = context.payload.issue;
            const newIssue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Review Issue ${original.number}`,
              body: `Auto-generated review issue for [#${original.number}](${original.html_url})`,
              assignees: [context.actor],
              labels: ['review']
            });
            core.setOutput("issue_number", newIssue.data.number);
            core.setOutput("node_id", newIssue.data.node_id);

      # Step 3: Add to Pontem Scheduling project and set status to Ready if not already assigned
      - name: Add to Pontem Scheduling project and set status to Ready
        env:
          GH_TOKEN: ${{ github.token }}
          PROJECT_URL: ${{ env.PROJECT_URL }}
        run: |
          set -euo pipefail

          url="$PROJECT_URL"
          user=$(echo "$url" | awk -F'users/' '{print $2}' | cut -d/ -f1)
          num=$(echo "$url" | awk -F'projects/' '{print $2}' | cut -d/ -f1)
          
          ISSUE_ID="${{ steps.review_issue_check.outputs.issue_id }}"
          if [[ -z "$ISSUE_ID" ]]; then
            echo "‚ùå No valid ISSUE_ID found to assign to project"
            exit 1
          fi

          proj_node=$(gh api graphql -f query='
            query($user:String!){
              user(login:$user){
                projectsV2(first:100){ nodes{ number id } }
              }
            }' -f user="$user" \
            --jq '.data.user.projectsV2.nodes[]
                  | select(.number=='"$num"')
                  | .id')

          item=$(gh api graphql -f query='
            query($proj:ID!){
              node(id:$proj){
                ... on ProjectV2{
                  items(first:100){
                    nodes{
                      id
                      content{ ... on Issue{ id } }
                    }
                  }
                }
              }
            }' -f proj="$proj_node" \
            --jq '.data.node.items.nodes[]
                  | select(.content.id=="'$ISSUE_ID'")
                  | .id')

          if [[ -z "$item" || "$item" == "null" ]]; then
            item=$(gh api graphql -f query='
              mutation($proj:ID!,$issue:ID!){
                addProjectV2ItemById(input:{projectId:$proj,contentId:$issue}){
                  item{ id }
                }
              }' -f proj="$proj_node" -f issue="$ISSUE_ID" \
              --jq '.data.addProjectV2ItemById.item.id')
          fi

          # Set Status = Ready
          field_id=$(gh api graphql -f query='
            query($proj:ID!){
              node(id:$proj){
                ... on ProjectV2{
                  fields(first:50){ nodes {
                    id
                    name
                    ... on ProjectV2SingleSelectField { options { id name } }
                  }}
                }
              }
            }' -f proj="$proj_node" \
            --jq '.data.node.fields.nodes[] | select(.name=="Status") | .id')

          ready_option=$(gh api graphql -f query='
            query($proj:ID!){
              node(id:$proj){
                ... on ProjectV2{
                  fields(first:50){ nodes {
                    name
                    ... on ProjectV2SingleSelectField { options { id name } }
                  }}
                }
              }
            }' -f proj="$proj_node" \
            --jq '.data.node.fields.nodes[]
                  | select(.name=="Status")
                  | .options[] | select(.name=="Ready") | .id')

          gh api graphql -f query='
            mutation($proj:ID!,$item:ID!,$field:ID!,$option:ID!){
              updateProjectV2ItemFieldValue(input:{
                projectId:$proj,
                itemId:$item,
                fieldId:$field,
                value:{singleSelectOptionId:$option}
              }) {
                projectV2Item { id }
              }
            }' \
            -f proj="$proj_node" -f item="$item" -f field="$field_id" -f option="$ready_option"

          echo "‚úÖ Review issue added and marked Ready"


